import json

def test_final_results():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    print("=== –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ===\n")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Ñ–∞–π–ª
        with open('components.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        if 'GPU' not in data:
            print("‚ùå –í JSON —Ñ–∞–π–ª–µ –Ω–µ—Ç —Å–µ–∫—Ü–∏–∏ GPU!")
            return
        
        gpus = data['GPU']
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(gpus)} –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –≤ JSON —Ñ–∞–π–ª–µ\n")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
        test_cases = [
            {
                "name": "(TUF 3-GTX1660S-O6G-GAMING)",
                "expected_clean_name": "GeForce GTX 1660 SUPER",
                "expected_name_gb": "6Gb"
            },
            {
                "name": "(ROG-STRIX-GTX1650S-A4G-GAMING)",
                "expected_clean_name": "GeForce GTX 1650 SUPER",
                "expected_name_gb": "4Gb"
            },
            {
                "name": "(PH-GTX1660S-O6G)",
                "expected_clean_name": "GeForce GTX 1660 SUPER",
                "expected_name_gb": "6Gb"
            },
            {
                "name": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ MSI PCI-E GTX 1650 SUPER GAMING X nVidia GeForce GTX 1650SUPER 4096Mb 128bit GDDR6 1485/12000 DVIx1/HDMIx1/DPx3/HDCP Ret",
                "expected_clean_name": "GeForce GTX 1650 SUPER",
                "expected_name_gb": "4Gb"
            },
            {
                "name": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ Palit PCI-E PA-GTX1660SUPER STORMX 6G nVidia GeForce GTX 1660SUPER 6144Mb 192bit GDDR6 1530/14000 DVIx1/HDMIx1/DPx1/HDCP Ret",
                "expected_clean_name": "GeForce GTX 1660 SUPER",
                "expected_name_gb": "6Gb"
            }
        ]
        
        print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ù–´–• –í–ò–î–ï–û–ö–ê–†–¢:\n")
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"–¢–µ—Å—Ç {i}: {test_case['name']}")
            
            # –ò—â–µ–º –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É
            found_gpu = None
            for gpu in gpus:
                if gpu.get('name') == test_case['name']:
                    found_gpu = gpu
                    break
            
            if found_gpu:
                clean_name = found_gpu.get('clean_name', '')
                name_gb = found_gpu.get('name_gb', '')
                memory_size_gb = found_gpu.get('memory_size_gb', '')
                manufacturer = found_gpu.get('manufacturer', '')
                architecture = found_gpu.get('architecture', '')
                
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤ JSON")
                print(f"  clean_name: '{clean_name}'")
                print(f"  name_gb: '{name_gb}'")
                print(f"  memory_size_gb: {memory_size_gb}")
                print(f"  manufacturer: '{manufacturer}'")
                print(f"  architecture: '{architecture}'")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                clean_name_ok = clean_name == test_case['expected_clean_name']
                name_gb_ok = name_gb == test_case['expected_name_gb']
                
                if clean_name_ok and name_gb_ok:
                    print(f"  üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
                else:
                    print(f"  ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–´:")
                    if not clean_name_ok:
                        print(f"    - clean_name: –æ–∂–∏–¥–∞–ª–æ—Å—å '{test_case['expected_clean_name']}', –ø–æ–ª—É—á–µ–Ω–æ '{clean_name}'")
                    if not name_gb_ok:
                        print(f"    - name_gb: –æ–∂–∏–¥–∞–ª–æ—Å—å '{test_case['expected_name_gb']}', –ø–æ–ª—É—á–µ–Ω–æ '{name_gb}'")
            else:
                print(f"  ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê –í JSON")
            
            print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—é name_gb
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–û–õ–Æ NAME_GB:\n")
        
        with_name_gb = 0
        without_name_gb = 0
        without_memory = 0
        
        for gpu in gpus:
            if gpu.get('name_gb'):
                with_name_gb += 1
            elif gpu.get('memory_size_gb'):
                without_name_gb += 1
            else:
                without_memory += 1
        
        print(f"  –í—Å–µ–≥–æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç: {len(gpus)}")
        print(f"  –° –ø–æ–ª–µ–º name_gb: {with_name_gb}")
        print(f"  –ë–µ–∑ –ø–æ–ª—è name_gb (–Ω–æ —Å memory_size_gb): {without_name_gb}")
        print(f"  –ë–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏: {without_memory}")
        print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è name_gb: {(with_name_gb / len(gpus) * 100):.1f}%")
        
        # –ü—Ä–∏–º–µ—Ä—ã –∏—Ç–æ–≥–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
        print("\nüéØ –ü–†–ò–ú–ï–†–´ –ò–¢–û–ì–û–í–´–• –ù–ê–ó–í–ê–ù–ò–ô –í–ò–î–ï–û–ö–ê–†–¢:\n")
        
        examples = [
            "GeForce GT 710 2Gb",
            "GeForce GTX 1650 SUPER 4Gb", 
            "GeForce GTX 1660 SUPER 6Gb",
            "GeForce RTX 2060 6Gb",
            "Radeon RX 570 8Gb"
        ]
        
        for example in examples:
            print(f"  {example}")
        
        print("\n‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_final_results() 