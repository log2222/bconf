import json
import re
from collections import defaultdict

def auto_check_all_cpus():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ enrichment –≤—Å–µ—Ö CPU —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    with open('components.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    total_cpus = len(data['CPU'])
    enrichment_fields = ['ProcessorNumber', 'CoreCount', 'ThreadCount', 'ClockSpeed', 'Cache']
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'total': total_cpus,
        'fully_enriched': 0,
        'partially_enriched': 0,
        'not_enriched': 0,
        'by_brand': defaultdict(lambda: {'total': 0, 'enriched': 0, 'partial': 0, 'not_enriched': 0}),
        'missing_fields': defaultdict(int),
        'examples': {
            'fully_enriched': [],
            'partially_enriched': [],
            'not_enriched': []
        }
    }
    
    print("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ enrichment –≤—Å–µ—Ö CPU...")
    print("=" * 80)
    
    for cpu in data['CPU']:
        name = cpu['name']
        enriched_count = sum(1 for field in enrichment_fields if cpu.get(field))
        total_fields = len(enrichment_fields)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–µ–Ω–¥
        brand = "Unknown"
        if "intel" in name.lower():
            brand = "Intel"
        elif "amd" in name.lower():
            brand = "AMD"
        
        stats['by_brand'][brand]['total'] += 1
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if enriched_count == total_fields:
            stats['fully_enriched'] += 1
            stats['by_brand'][brand]['enriched'] += 1
            if len(stats['examples']['fully_enriched']) < 3:
                stats['examples']['fully_enriched'].append(name)
        elif enriched_count > 0:
            stats['partially_enriched'] += 1
            stats['by_brand'][brand]['partial'] += 1
            if len(stats['examples']['partially_enriched']) < 3:
                stats['examples']['partially_enriched'].append(name)
        else:
            stats['not_enriched'] += 1
            stats['by_brand'][brand]['not_enriched'] += 1
            if len(stats['examples']['not_enriched']) < 3:
                stats['examples']['not_enriched'].append(name)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
        for field in enrichment_fields:
            if not cpu.get(field):
                stats['missing_fields'][field] += 1
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"–í—Å–µ–≥–æ CPU: {stats['total']}")
    print(f"‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–æ–≥–∞—â–µ–Ω—ã: {stats['fully_enriched']} ({stats['fully_enriched']/stats['total']*100:.1f}%)")
    print(f"‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω—ã: {stats['partially_enriched']} ({stats['partially_enriched']/stats['total']*100:.1f}%)")
    print(f"‚ùå –ù–µ –æ–±–æ–≥–∞—â–µ–Ω—ã: {stats['not_enriched']} ({stats['not_enriched']/stats['total']*100:.1f}%)")
    print(f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏—è: {((stats['fully_enriched'] + stats['partially_enriched']) / stats['total'] * 100):.1f}%")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º
    print(f"\nüè∑Ô∏è  –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ë–†–ï–ù–î–ê–ú:")
    for brand, brand_stats in stats['by_brand'].items():
        if brand_stats['total'] > 0:
            enriched_pct = brand_stats['enriched'] / brand_stats['total'] * 100
            partial_pct = brand_stats['partial'] / brand_stats['total'] * 100
            not_enriched_pct = brand_stats['not_enriched'] / brand_stats['total'] * 100
            
            print(f"\n{brand}:")
            print(f"  –í—Å–µ–≥–æ: {brand_stats['total']}")
            print(f"  ‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–æ–≥–∞—â–µ–Ω—ã: {brand_stats['enriched']} ({enriched_pct:.1f}%)")
            print(f"  ‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω—ã: {brand_stats['partial']} ({partial_pct:.1f}%)")
            print(f"  ‚ùå –ù–µ –æ–±–æ–≥–∞—â–µ–Ω—ã: {brand_stats['not_enriched']} ({not_enriched_pct:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ü–û–õ–ï–ô:")
    for field, count in sorted(stats['missing_fields'].items(), key=lambda x: x[1], reverse=True):
        percentage = count / stats['total'] * 100
        status = "‚úÖ" if percentage < 20 else "‚ö†Ô∏è" if percentage < 50 else "‚ùå"
        print(f"  {status} {field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É {count} CPU ({percentage:.1f}%)")
    
    # –ü—Ä–∏–º–µ—Ä—ã
    print(f"\nüìã –ü–†–ò–ú–ï–†–´:")
    
    if stats['examples']['fully_enriched']:
        print(f"\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö CPU:")
        for i, name in enumerate(stats['examples']['fully_enriched'], 1):
            print(f"  {i}. {name}")
    
    if stats['examples']['partially_enriched']:
        print(f"\n‚ö†Ô∏è  –ü—Ä–∏–º–µ—Ä—ã —á–∞—Å—Ç–∏—á–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö CPU:")
        for i, name in enumerate(stats['examples']['partially_enriched'], 1):
            print(f"  {i}. {name}")
    
    if stats['examples']['not_enriched']:
        print(f"\n‚ùå –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö CPU:")
        for i, name in enumerate(stats['examples']['not_enriched'], 1):
            print(f"  {i}. {name}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if stats['not_enriched'] > 0:
        print(f"‚Ä¢ {stats['not_enriched']} CPU —Ç—Ä–µ–±—É—é—Ç enrichment")
        if stats['missing_fields']['ProcessorNumber'] > stats['total'] * 0.5:
            print("‚Ä¢ –ú–Ω–æ–≥–æ CPU –±–µ–∑ ProcessorNumber - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ CSV —Ñ–∞–π–ª—ã")
        if stats['missing_fields']['CoreCount'] > stats['total'] * 0.5:
            print("‚Ä¢ –ú–Ω–æ–≥–æ CPU –±–µ–∑ CoreCount - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è")
    else:
        print("‚Ä¢ –í—Å–µ CPU –æ–±–æ–≥–∞—â–µ–Ω—ã! üéâ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    report_file = "cpu_enrichment_report.txt"
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("–û–¢–ß–ï–¢ –ü–û ENRICHMENT CPU\n")
        f.write("=" * 50 + "\n\n")
        f.write(f"–í—Å–µ–≥–æ CPU: {stats['total']}\n")
        f.write(f"–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–æ–≥–∞—â–µ–Ω—ã: {stats['fully_enriched']}\n")
        f.write(f"–ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω—ã: {stats['partially_enriched']}\n")
        f.write(f"–ù–µ –æ–±–æ–≥–∞—â–µ–Ω—ã: {stats['not_enriched']}\n")
        f.write(f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏—è: {((stats['fully_enriched'] + stats['partially_enriched']) / stats['total'] * 100):.1f}%\n")
    
    print(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
    
    return stats

if __name__ == "__main__":
    auto_check_all_cpus() 