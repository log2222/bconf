import json
import re

def analyze_ram_kit(ram_name):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞ –ø–∞–º—è—Ç–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π"""
    if not ram_name:
        return 1
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–¥—É–ª–µ–π –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ
    patterns = [
        # 2x4Gb, 4x8Gb, 2x16Gb –∏ —Ç.–¥.
        r'(\d+)x(\d+)gb',
        # 2x4G, 4x8G, 2x16G –∏ —Ç.–¥.
        r'(\d+)x(\d+)g',
        # 2x4, 4x8, 2x16 –∏ —Ç.–¥. (–µ—Å–ª–∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏–¥–µ—Ç Gb/G)
        r'(\d+)x(\d+)(?=\s*[gG])',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, ram_name, re.IGNORECASE)
        if match:
            return int(match.group(1))
    
    # –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 1 –º–æ–¥—É–ª—å
    return 1

def test_ram_compatibility():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ –ø–∞–º—è—Ç–∏"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        with open('components.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON: {e}")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç–µ—Ä–∏–Ω—Å–∫—É—é –ø–ª–∞—Ç—É —Å 4 —Å–ª–æ—Ç–∞–º–∏
    motherboards = data.get('Motherboard', [])
    test_motherboard = None
    for mb in motherboards:
        if mb.get('ram_slots', 0) >= 4:
            test_motherboard = mb
            break
    
    if not test_motherboard:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞ —Å 4+ —Å–ª–æ—Ç–∞–º–∏")
        return
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç–µ: {test_motherboard.get('name')}")
    print(f"   –°–ª–æ—Ç–æ–≤ –ø–∞–º—è—Ç–∏: {test_motherboard.get('ram_slots')}")
    print("=" * 80)
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–ø–ª–µ–∫—Ç—ã –ø–∞–º—è—Ç–∏ 2x4Gb
    ram_modules = data.get('RAM', [])
    test_ram_kits = []
    
    for ram in ram_modules:
        name = ram.get('name', '')
        if '2x4' in name.lower() or '2x4gb' in name.lower():
            test_ram_kits.append(ram)
    
    if not test_ram_kits:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–º–ø–ª–µ–∫—Ç—ã –ø–∞–º—è—Ç–∏ 2x4Gb")
        return
    
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(test_ram_kits)} –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ 2x4Gb:")
    for i, ram in enumerate(test_ram_kits[:3], 1):
        name = ram.get('name', '')
        modules_in_kit = ram.get('modules_in_kit', 0)
        analyzed_modules = analyze_ram_kit(name)
        
        print(f"{i}. {name}")
        print(f"   modules_in_kit –≤ –¥–∞–Ω–Ω—ã—Ö: {modules_in_kit}")
        print(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {analyzed_modules}")
        print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {modules_in_kit or analyzed_modules}")
        print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:")
    print("-" * 50)
    
    test_kit = test_ram_kits[0]
    kit_name = test_kit.get('name', '')
    modules_in_kit = test_kit.get('modules_in_kit', 0)
    analyzed_modules = analyze_ram_kit(kit_name)
    used_modules = modules_in_kit or analyzed_modules
    
    max_slots = test_motherboard.get('ram_slots', 4)
    
    print(f"–ö–æ–º–ø–ª–µ–∫—Ç: {kit_name}")
    print(f"–ú–æ–¥—É–ª–µ–π –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ: {used_modules}")
    print(f"–ú–∞–∫—Å–∏–º—É–º —Å–ª–æ—Ç–æ–≤: {max_slots}")
    print()
    
    # –°–∏–º—É–ª—è—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤
    for i in range(1, 5):
        total_modules = i * used_modules
        can_add = total_modules <= max_slots
        status = "‚úÖ –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å" if can_add else "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç"
        
        print(f"{i} –∫–æ–º–ø–ª–µ–∫—Ç{'–∞' if i > 1 else ''}: {total_modules} –º–æ–¥—É–ª–µ–π –∏–∑ {max_slots} - {status}")
    
    print()
    print("üìã –í—ã–≤–æ–¥:")
    print(f"‚Ä¢ 1 –∫–æ–º–ø–ª–µ–∫—Ç {kit_name} = {used_modules} –º–æ–¥—É–ª—è")
    print(f"‚Ä¢ 2 –∫–æ–º–ø–ª–µ–∫—Ç–∞ = {2 * used_modules} –º–æ–¥—É–ª–µ–π")
    print(f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å: {max_slots // used_modules} –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤")

if __name__ == "__main__":
    test_ram_compatibility() 