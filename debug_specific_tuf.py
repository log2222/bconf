import json
import csv
import re
from typing import Dict, List, Any, Optional

def extract_model_name(name: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å—ã (SUPER, TI, XT) —Å –ø—Ä–æ–±–µ–ª–æ–º"""
    if not name:
        return ""
    name = name.lower()
    name = re.sub(r'\s+', ' ', name).strip()
    
    print(f"  üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ: '{name}'")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω: –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    name = re.sub(r'(\d)(super|ti|xt|m)\b', r'\1 \2', name)
    print(f"  üîß –ü–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–±–µ–ª–æ–≤: '{name}'")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –≤ —Å–∫–æ–±–∫–∞—Ö (–∞—Ä—Ç–∏–∫—É–ª—ã)
    if name.startswith('(') and name.endswith(')'):
        print(f"  üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–∫–æ–±–∫–∞—Ö, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
        # –ò—â–µ–º –º–æ–¥–µ–ª—å –≤ –∞—Ä—Ç–∏–∫—É–ª–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: TUF 3-GTX1660S-O6G-GAMING
        bracket_patterns = [
            r'gtx\s*(\d+)\s*(super|ti|xt|s)?',
            r'rtx\s*(\d+)\s*(super|ti|xt|s)?',
            r'gt\s*(\d+)',
            r'rx\s*(\d+)\s*(xt)?',
            r'hd\s*(\d+)',
            r'(\d+)\s*(super|ti|xt|s)?',
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ –º–µ–∂–¥—É —á–∏—Å–ª–æ–º –∏ —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
            r'gtx\s*(\d+)(super|ti|xt|s)\b',
            r'rtx\s*(\d+)(super|ti|xt|s)\b',
            r'(\d+)(super|ti|xt|s)\b'
        ]
        for i, pattern in enumerate(bracket_patterns):
            match = re.search(pattern, name)
            if match:
                number = match.group(1)
                suffix = match.group(2) if len(match.groups()) > 1 else ""
                print(f"    ‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω {i+1} —Å—Ä–∞–±–æ—Ç–∞–ª: '{pattern}' -> —á–∏—Å–ª–æ: '{number}', —Å—É—Ñ—Ñ–∏–∫—Å: '{suffix}'")
                if suffix:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 'S' –≤ 'SUPER' –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                    if suffix.lower() == 's':
                        suffix = 'super'
                    result = f"{number} {suffix}"
                    print(f"    üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: '{result}'")
                    return result
                else:
                    result = f"{number}"
                    print(f"    üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: '{result}'")
                    return result
            else:
                print(f"    ‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω {i+1} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: '{pattern}'")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    patterns = [
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        r'(geforce\s+(?:gtx|rtx)\s+\d+\s*(?:ti|super)?)',
        r'(gtx\s+\d+\s*(?:ti|super)?)',
        r'(rtx\s+\d+\s*(?:ti|super)?)',
        r'(geforce\s+gt\s+\d+)',
        r'(gt\s+\d+)',
        r'(geforce\s+gts\s+\d+)',
        r'(gts\s+\d+)',
        r'(geforce\s+gs\s+\d+)',
        r'(gs\s+\d+)',
        r'(geforce\s+g\s+\d+)',
        r'(g\s+\d+)',
        r'(radeon\s+rx\s+\d+\s*(?:xt)?)',
        r'(rx\s+\d+\s*(?:xt)?)',
        r'(radeon\s+hd\s+\d+)',
        r'(hd\s+\d+)',
        r'(radeon\s+r\d+\s+\d+)',
        r'(r\d+\s+\d+)',
        r'(radeon\s+pro\s+wx\s+\d+)',
        r'(pro\s+wx\s+\d+)',
        r'(quadro\s+\w+\s+\d+)',
        r'(quadro\s+\d+)',
        r'(radeon\s+pro\s+wx\s+\d+)',
        r'(pro\s+wx\s+\d+)',
        r'(radeon\s+pro\s+w\s+\d+)',
        r'(pro\s+w\s+\d+)',
        r'(radeon\s+pro\s+v\s+\d+)',
        r'(pro\s+v\s+\d+)',
        r'(radeon\s+pro\s+e\s+\d+)',
        r'(pro\s+e\s+\d+)',
        r'(radeon\s+pro\s+s\s+\d+)',
        r'(pro\s+s\s+\d+)',
        # –û–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ü–∏—Ñ—Ä (–Ω–∏–∑—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        r'(\d+\s*(?:ti|super|xt)?)',
    ]
    for i, pattern in enumerate(patterns):
        match = re.search(pattern, name)
        if match:
            model = match.group(1).strip()
            print(f"    ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω {i+1} —Å—Ä–∞–±–æ—Ç–∞–ª: '{pattern}' -> '{model}'")
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞
            model = re.sub(r'\b(geforce|radeon|pro|wx|w|v|e|s|d|u|z|vega|fe|56|64|liquid|air|limited|edition|cooled)\b', '', model).strip()
            model = re.sub(r'\s+', ' ', model).strip()
            if model and len(model) > 2:
                print(f"    üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{model}'")
                return model
        else:
            print(f"    ‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω {i+1} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: '{pattern}'")
    
    print(f"    ‚ùå –ù–∏ –æ–¥–∏–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
    return ""

def main():
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–±–ª–µ–º–Ω—É—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É
    test_gpu_name = "(TUF 3-GTX1660S-O6G-GAMING)"
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è: {test_gpu_name}")
    print("=" * 60)
    
    result = extract_model_name(test_gpu_name)
    
    print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: '{result}'")
    
    if result:
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–≤–ª–µ—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–∞")

if __name__ == "__main__":
    main() 