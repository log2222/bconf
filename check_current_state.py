import json

def check_current_state():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ–∫–∞—Ä—Ç"""
    
    print("=== –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –î–ê–ù–ù–´–• –í–ò–î–ï–û–ö–ê–†–¢ ===\n")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Ñ–∞–π–ª
        with open('components.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–∏ GPU
        if 'GPU' not in data:
            print("‚ùå –í JSON —Ñ–∞–π–ª–µ –Ω–µ—Ç —Å–µ–∫—Ü–∏–∏ GPU!")
            return
        
        gpus = data['GPU']
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(gpus)} –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –≤ JSON —Ñ–∞–π–ª–µ\n")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
        fields_analysis = {}
        gpus_with_all_fields = []
        
        for i, gpu in enumerate(gpus):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
            clean_name = gpu.get('clean_name')
            memory_size_gb = gpu.get('memory_size_gb')
            name_gb = gpu.get('name_gb')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            if clean_name is not None:
                field_type = type(clean_name).__name__
                if 'clean_name' not in fields_analysis:
                    fields_analysis['clean_name'] = {'count': 0, 'types': {}}
                fields_analysis['clean_name']['count'] += 1
                if field_type not in fields_analysis['clean_name']['types']:
                    fields_analysis['clean_name']['types'][field_type] = 0
                fields_analysis['clean_name']['types'][field_type] += 1
            
            if memory_size_gb is not None:
                field_type = type(memory_size_gb).__name__
                if 'memory_size_gb' not in fields_analysis:
                    fields_analysis['memory_size_gb'] = {'count': 0, 'types': {}}
                fields_analysis['memory_size_gb']['count'] += 1
                if field_type not in fields_analysis['memory_size_gb']['types']:
                    fields_analysis['memory_size_gb']['types'][field_type] = 0
                fields_analysis['memory_size_gb']['types'][field_type] += 1
            
            if name_gb is not None:
                field_type = type(name_gb).__name__
                if 'name_gb' not in fields_analysis:
                    fields_analysis['name_gb'] = {'count': 0, 'types': {}}
                fields_analysis['name_gb']['count'] += 1
                if field_type not in fields_analysis['name_gb']['types']:
                    fields_analysis['name_gb']['types'][field_type] = 0
                fields_analysis['name_gb']['types'][field_type] += 1
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ —Ç—Ä–∏ –ø–æ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            if clean_name and memory_size_gb is not None and name_gb:
                gpus_with_all_fields.append((i+1, gpu))
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—è–º
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—è–º:")
        for field, stats in fields_analysis.items():
            print(f"  {field}:")
            print(f"    –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['count']}")
            print(f"    –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: {stats['types']}")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–æ–ª–µ–π
        print(f"üìã –ü—Ä–∏–º–µ—Ä—ã –≤–∏–¥–µ–æ–∫–∞—Ä—Ç —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–æ–ª–µ–π ({len(gpus_with_all_fields)} —à—Ç.):")
        for i, (num, gpu) in enumerate(gpus_with_all_fields[:10]):
            name = gpu.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            clean_name = gpu.get('clean_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            memory_size_gb = gpu.get('memory_size_gb')
            name_gb = gpu.get('name_gb')
            
            print(f"{i+1}. –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ #{num}:")
            print(f"   name: {name[:60]}...")
            print(f"   clean_name: {clean_name}")
            print(f"   memory_size_gb: {memory_size_gb} ({type(memory_size_gb).__name__})")
            print(f"   name_gb: {name_gb} ({type(name_gb).__name__})")
            print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã GeForce GT 710
        print("üéØ –ü—Ä–∏–º–µ—Ä—ã GeForce GT 710:")
        gt710_examples = []
        for num, gpu in gpus_with_all_fields:
            if 'GT 710' in gpu.get('clean_name', ''):
                gt710_examples.append((num, gpu))
        
        for i, (num, gpu) in enumerate(gt710_examples[:5]):
            name = gpu.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            clean_name = gpu.get('clean_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            memory_size_gb = gpu.get('memory_size_gb')
            name_gb = gpu.get('name_gb')
            
            print(f"{i+1}. –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ #{num}:")
            print(f"   name: {name[:60]}...")
            print(f"   clean_name: {clean_name}")
            print(f"   memory_size_gb: {memory_size_gb}")
            print(f"   name_gb: {name_gb}")
            print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ
        enriched_count = 0
        for gpu in gpus:
            if len(gpu) > 5:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 5 –ø–æ–ª–µ–π, —Å—á–∏—Ç–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–π
                enriched_count += 1
        
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç: {len(gpus)}")
        print(f"  –û–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö: {enriched_count}")
        print(f"  –° –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–æ–ª–µ–π: {len(gpus_with_all_fields)}")
        print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏—è: {(enriched_count/len(gpus)*100):.1f}%")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    check_current_state() 