import json
import re

def check_missing_memory():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç GPU –±–µ–∑ –ø–æ–ª—è name_gb –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö"""
    
    try:
        with open('components.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª components.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞: {e}")
        return
    
    gpus = data.get('GPU', [])
    without_name_gb = [g for g in gpus if 'name_gb' not in g]
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ GPU –±–µ–∑ –ø–æ–ª—è name_gb ({len(without_name_gb)} —à—Ç—É–∫):")
    print("=" * 80)
    
    for i, gpu in enumerate(without_name_gb):
        name = gpu.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        memory_size_gb = gpu.get('memory_size_gb')
        memory_size_raw = gpu.get('memory_size_raw')
        clean_name = gpu.get('clean_name', '–ù–µ—Ç')
        
        print(f"\n{i+1}. {name}")
        print(f"   memory_size_gb: {memory_size_gb}")
        print(f"   memory_size_raw: {memory_size_raw}")
        print(f"   clean_name: {clean_name}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        memory_patterns = [
            r'(\d+)\s*[mg]b\s*[dg]dr',  # 2048Mb GDDR5
            r'(\d+)\s*[mg]b',           # 2048Mb
            r'(\d+)\s*[dg]dr',          # 2048 GDDR5
            r'(\d+)\s*bit',             # 256bit
        ]
        
        extracted_memory = None
        for pattern in memory_patterns:
            match = re.search(pattern, name.lower())
            if match:
                value = int(match.group(1))
                if 'bit' in pattern:
                    # –≠—Ç–æ —à–∏–Ω–∞ –ø–∞–º—è—Ç–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
                if value > 1000:  # –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ —Ä–∞–∑–º–µ—Ä –≤ MB
                    extracted_memory = value // 1024  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ GB
                else:
                    extracted_memory = value
                break
        
        if extracted_memory:
            print(f"   üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏: {extracted_memory}GB")
        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏
        for key, value in gpu.items():
            if isinstance(value, str) and any(word in value.lower() for word in ['mb', 'gb', 'memory', 'vram']):
                print(f"   üìù –ü–æ–ª–µ {key}: {value}")

if __name__ == "__main__":
    check_missing_memory() 