import re

def analyze_ram_kit(ram_name):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞ –ø–∞–º—è—Ç–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–Ω–æ–∫"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–ª–∞–Ω–æ–∫ –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ
    patterns = [
        # 2x4Gb, 4x8Gb, 2x16Gb –∏ —Ç.–¥.
        r'(\d+)x(\d+)gb',
        # 2x4G, 4x8G, 2x16G –∏ —Ç.–¥.
        r'(\d+)x(\d+)g',
        # 2x4, 4x8, 2x16 –∏ —Ç.–¥. (–µ—Å–ª–∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏–¥–µ—Ç Gb/G)
        r'(\d+)x(\d+)(?=\s*[gG])',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, ram_name, re.IGNORECASE)
        if match:
            kit_count = int(match.group(1))
            capacity_per_stick = int(match.group(2))
            return kit_count, capacity_per_stick
    
    # –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø—Ä–æ—Å—Ç–æ –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8Gb, 16Gb)
    volume_patterns = [
        r'(\d+)gb',
        r'(\d+)g(?=\s|$)',
    ]
    
    for pattern in volume_patterns:
        match = re.search(pattern, ram_name, re.IGNORECASE)
        if match:
            capacity = int(match.group(1))
            return 1, capacity
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 1 –ø–ª–∞–Ω–∫—É
    return 1, 0

def test_ram_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ –ø–∞–º—è—Ç–∏"""
    test_cases = [
        "–ü–∞–º—è—Ç—å DDR3 2x4Gb 1600MHz Corsair CMZ8GX3M2A1600C9",
        "–ü–∞–º—è—Ç—å DDR4 4x4Gb 3200MHz Kingston KVR32N22S8K4/16",
        "–ü–∞–º—è—Ç—å DDR4 2x8Gb 3600MHz G.Skill F4-3600C18D-16GVK",
        "–ü–∞–º—è—Ç—å DDR4 1x16Gb 3200MHz Crucial CT16G4DFD832A",
        "–ü–∞–º—è—Ç—å DDR4 8Gb 3200MHz Patriot PSD48G320081",
        "–ü–∞–º—è—Ç—å DDR4 16Gb 3600MHz Corsair CMK16GX4M1D3600C18",
        "–ü–∞–º—è—Ç—å DDR4 32Gb 3200MHz G.Skill F4-3200C16D-32GTZ",
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ –ø–∞–º—è—Ç–∏:")
    print("=" * 60)
    
    for i, test_case in enumerate(test_cases, 1):
        kit_count, capacity_per_stick = analyze_ram_kit(test_case)
        
        if kit_count > 1 and capacity_per_stick > 0:
            result = f"DDR4 {kit_count}x{capacity_per_stick}Gb"
        elif kit_count == 1 and capacity_per_stick > 0:
            result = f"DDR4 {capacity_per_stick}Gb"
        else:
            result = "DDR4"
        
        print(f"{i}. {test_case}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–Ω–æ–∫: {kit_count}, –û–±—ä–µ–º –Ω–∞ –ø–ª–∞–Ω–∫—É: {capacity_per_stick}Gb")
        print()

if __name__ == "__main__":
    test_ram_analysis() 