import json
import csv
import re
from typing import Dict, List, Any, Optional

def extract_model_name(name: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã"""
    if not name:
        return ""
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    name = name.lower()
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    name = re.sub(r'\s+', ' ', name).strip()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    patterns = [
        # NVIDIA GeForce GTX/RTX
        r'(geforce\s+(?:gtx|rtx)\s+\d+\s*(?:ti|super)?)',
        r'(gtx\s+\d+\s*(?:ti|super)?)',
        r'(rtx\s+\d+\s*(?:ti|super)?)',
        # NVIDIA GeForce GT
        r'(geforce\s+gt\s+\d+\s*(?:m)?)',
        r'(gt\s+\d+\s*(?:m)?)',
        # AMD Radeon RX
        r'(radeon\s+rx\s+\d+\s*(?:xt)?)',
        r'(rx\s+\d+\s*(?:xt)?)',
        # –û–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ü–∏—Ñ—Ä
        r'(\d+\s*(?:ti|super|xt)?)',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, name)
        if match:
            return match.group(1)
    
    return ""

def normalize_gpu_name(name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if not name:
        return ""
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    name = name.lower()
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    name = re.sub(r'\s+', ' ', name).strip()
    
    return name

def find_matching_gpu(gpu_name: str, gpu_database: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    model_name = extract_model_name(gpu_name)
    normalized_name = normalize_gpu_name(gpu_name)
    
    if not model_name and not normalized_name:
        return None
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –º–æ–¥–µ–ª–∏
    if model_name:
        for gpu in gpu_database:
            db_name = normalize_gpu_name(gpu.get('name', ''))
            db_model = extract_model_name(gpu.get('name', ''))
            
            if model_name == db_model:
                return gpu
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—à—É –º–æ–¥–µ–ª—å
            if model_name in db_name or model_name in db_model:
                return gpu
    
    # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
    best_match = None
    best_score = 0
    
    for gpu in gpu_database:
        db_name = normalize_gpu_name(gpu.get('name', ''))
        
        if not db_name:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        name_parts = normalized_name.split()
        db_parts = db_name.split()
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —á–∞—Å—Ç–µ–π
        matches = 0
        for part in name_parts:
            if any(part in db_part or db_part in part for db_part in db_parts):
                matches += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if name_parts:
            score = matches / len(name_parts)
            if score > best_score and score > 0.3:  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–æ 30%
                best_score = score
                best_match = gpu
    
    return best_match

def test_gpu_clean_name():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è clean_name –¥–ª—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç"""
    
    print("=== –¢–ï–°–¢ –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–Ø CLEAN_NAME –î–õ–Ø –í–ò–î–ï–û–ö–ê–†–¢ ===\n")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º CSV –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print("–ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ–∫–∞—Ä—Ç...")
    gpu_database = []
    try:
        with open('gpu-database.csv', 'r', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            gpu_database = list(reader)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(gpu_database)} –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –∏–∑ CSV")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CSV: {e}")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –∏–∑ JSON
    test_gpus = [
        {
            "name": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ Palit PCI-E PA-GT710-1GD5 nVidia GeForce GT 710 1024Mb 64bit GDDR5 954/2500 DVIx1/HDMIx1/CRTx1/HDCP Bulk low profile",
            "price": 2889,
            "code": "00-00236339",
            "article": "NE5T7100HD06-2081F"
        },
        {
            "name": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ MSI PCI-E GT 710 1GD3H LP nVidia GeForce GT 710 1024Mb 64bit DDR3 954/1600 DVIx1/HDMIx1/CRTx1/HDCP Ret low profile",
            "price": 3000,
            "code": "00-00236340",
            "article": "GT710-1GD3H-LP"
        },
        {
            "name": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ MSI PCI-E RX 550 2GT LP OC AMD Radeon RX 550 2048Mb 128bit GDDR5 1203/7000 DVIx1/HDMIx1/HDCP Ret low profile",
            "price": 15000,
            "code": "00-00236341",
            "article": "RX550-2GT-LP-OC"
        }
    ]
    
    print(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_gpus)} –≤–∏–¥–µ–æ–∫–∞—Ä—Ç:\n")
    
    for i, test_gpu in enumerate(test_gpus, 1):
        gpu_name = test_gpu.get('name', '')
        print(f"{i}. {gpu_name}")
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        matching_gpu = find_matching_gpu(gpu_name, gpu_database)
        
        if matching_gpu:
            csv_name = matching_gpu.get('name', '')
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ CSV: {csv_name}")
            print(f"   üìù –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ clean_name: {csv_name}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ CSV
            manufacturer = matching_gpu.get('manufacturer', '')
            architecture = matching_gpu.get('architecture', '')
            memory_type = matching_gpu.get('memory_type', '')
            print(f"   üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {manufacturer}")
            print(f"   üèóÔ∏è  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {architecture}")
            print(f"   üíæ –¢–∏–ø –ø–∞–º—è—Ç–∏: {memory_type}")
        else:
            print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ CSV")
        
        print()
    
    print("=== –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê ===")
    print("‚úÖ –ü–æ–ª–µ clean_name –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π")
    print("üìù –≠—Ç–æ –ø–æ–ª–µ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ CSV –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("üîß –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python gpu_enrich_from_csv.py")

if __name__ == "__main__":
    test_gpu_clean_name() 