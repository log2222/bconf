import json
import csv
import re
from typing import Dict, List, Any, Optional

def extract_model_name(name: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å—ã (SUPER, TI, XT) —Å –ø—Ä–æ–±–µ–ª–æ–º"""
    if not name:
        return ""
    name = name.lower()
    name = re.sub(r'\s+', ' ', name).strip()
    
    print(f"  üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ: '{name}'")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω: –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    name = re.sub(r'(\d)(super|ti|xt|m)\b', r'\1 \2', name)
    print(f"  üîß –ü–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–±–µ–ª–æ–≤: '{name}'")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –≤ —Å–∫–æ–±–∫–∞—Ö (–∞—Ä—Ç–∏–∫—É–ª—ã)
    if name.startswith('(') and name.endswith(')'):
        print(f"  üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–∫–æ–±–∫–∞—Ö, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
        # –ò—â–µ–º –º–æ–¥–µ–ª—å –≤ –∞—Ä—Ç–∏–∫—É–ª–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: TUF 3-GTX1660S-O6G-GAMING
        bracket_patterns = [
            r'gtx\s*(\d+)\s*(super|ti|xt|s)?',
            r'rtx\s*(\d+)\s*(super|ti|xt|s)?',
            r'gt\s*(\d+)',
            r'rx\s*(\d+)\s*(xt)?',
            r'hd\s*(\d+)',
            r'(\d+)\s*(super|ti|xt|s)?',
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ –º–µ–∂–¥—É —á–∏—Å–ª–æ–º –∏ —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
            r'gtx\s*(\d+)(super|ti|xt|s)\b',
            r'rtx\s*(\d+)(super|ti|xt|s)\b',
            r'(\d+)(super|ti|xt|s)\b'
        ]
        for i, pattern in enumerate(bracket_patterns):
            match = re.search(pattern, name)
            if match:
                number = match.group(1)
                suffix = match.group(2) if len(match.groups()) > 1 else ""
                print(f"    ‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω {i+1} —Å—Ä–∞–±–æ—Ç–∞–ª: '{pattern}' -> —á–∏—Å–ª–æ: '{number}', —Å—É—Ñ—Ñ–∏–∫—Å: '{suffix}'")
                if suffix:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 'S' –≤ 'SUPER' –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                    if suffix.lower() == 's':
                        suffix = 'super'
                    result = f"{number} {suffix}"
                    print(f"    üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: '{result}'")
                    return result
                # –ï—Å–ª–∏ —Å—É—Ñ—Ñ–∏–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
                result = number
                print(f"    üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: '{result}'")
                return result
    
    print(f"  ‚ùå –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    patterns = [
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        r'(geforce\s+(?:gtx|rtx)\s+\d+\s*(?:ti|super)?)',
        r'(gtx\s+\d+\s*(?:ti|super)?)',
        r'(rtx\s+\d+\s*(?:ti|super)?)',
        r'(geforce\s+gt\s+\d+)',
        r'(gt\s+\d+)',
        r'(geforce\s+gts\s+\d+)',
        r'(gts\s+\d+)',
        r'(geforce\s+gs\s+\d+)',
        r'(gs\s+\d+)',
        r'(geforce\s+g\s+\d+)',
        r'(g\s+\d+)',
        r'(radeon\s+rx\s+\d+\s*(?:xt)?)',
        r'(rx\s+\d+\s*(?:xt)?)',
        r'(radeon\s+hd\s+\d+)',
        r'(hd\s+\d+)',
        r'(radeon\s+r\d+\s+\d+)',
        r'(r\d+\s+\d+)',
        r'(radeon\s+pro\s+wx\s+\d+)',
        r'(pro\s+wx\s+\d+)',
        r'(quadro\s+\w+\s+\d+)',
        r'(quadro\s+\d+)',
        r'(radeon\s+pro\s+wx\s+\d+)',
        r'(pro\s+wx\s+\d+)',
        r'(radeon\s+pro\s+w\s+\d+)',
        r'(pro\s+w\s+\d+)',
        r'(radeon\s+pro\s+v\s+\d+)',
        r'(pro\s+v\s+\d+)',
        r'(radeon\s+pro\s+e\s+\d+)',
        r'(pro\s+e\s+\d+)',
        r'(radeon\s+pro\s+s\s+\d+)',
        r'(pro\s+s\s+\d+)',
        # –û–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ü–∏—Ñ—Ä (–Ω–∏–∑—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        r'(\d+\s*(?:ti|super|xt)?)',
    ]
    for i, pattern in enumerate(patterns):
        match = re.search(pattern, name)
        if match:
            model = match.group(1).strip()
            print(f"    ‚úÖ –û–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω {i+1} —Å—Ä–∞–±–æ—Ç–∞–ª: '{pattern}' -> '{model}'")
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞
            model = re.sub(r'\b(geforce|radeon|pro|wx|w|v|e|s|d|u|z|vega|fe|56|64|liquid|air|limited|edition|cooled)\b', '', model).strip()
            model = re.sub(r'\s+', ' ', model).strip()
            if model and len(model) > 2:
                print(f"    üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{model}'")
                return model
    print(f"  ‚ùå –ù–∏ –æ–¥–∏–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
    return ""

def normalize_gpu_name(name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
    if not name:
        return ""
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    name = name.lower()
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    name = re.sub(r'\s+', ' ', name).strip()
    
    # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã
    name = re.sub(r'[^\w\s\d]', ' ', name)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã —Å–Ω–æ–≤–∞
    name = re.sub(r'\s+', ' ', name).strip()
    
    return name

def find_matching_gpu(gpu_name: str, gpu_database: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–µ—Å–∫—Ç–æ–ø–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"""
    
    print(f"üîç –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è: {gpu_name}")
    print("=" * 50)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    model_name = extract_model_name(gpu_name)
    normalized_name = normalize_gpu_name(gpu_name)
    
    print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: '{model_name}'")
    print(f"   –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{normalized_name}'")
    
    if not model_name and not normalized_name:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –º–æ–¥–µ–ª—å –∏–ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return None
    
    # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
    print(f"\nüîç 1. –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é...")
    for gpu in gpu_database:
        db_name = normalize_gpu_name(gpu.get('name', ''))
        if normalized_name == db_name:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {gpu.get('name', '')}")
            return gpu
    
    print(f"   ‚ùå –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    matches = []
    # 2. –ó–∞—Ç–µ–º –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –º–æ–¥–µ–ª–∏
    if model_name:
        print(f"\nüîç 2. –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –º–æ–¥–µ–ª–∏ '{model_name}':")
        for gpu in gpu_database:
            db_name = normalize_gpu_name(gpu.get('name', ''))
            db_model = extract_model_name(gpu.get('name', ''))
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            if model_name == db_model:
                print(f"   ‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {gpu.get('name', '')} (–º–æ–¥–µ–ª—å: '{db_model}')")
                matches.append((gpu, 100, 'exact_model'))
            # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            elif model_name in db_name or model_name in db_model:
                print(f"   üî∂ –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {gpu.get('name', '')} (–º–æ–¥–µ–ª—å: '{db_model}')")
                matches.append((gpu, 80, 'partial_model'))
    
    # 3. –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ
    if not matches:
        print(f"\nüîç 3. –ü–æ–∏—Å–∫ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π...")
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–µ–Ω–¥ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
        brand = None
        if 'nvidia' in gpu_name.lower():
            brand = 'nvidia'
        elif 'amd' in gpu_name.lower() or 'radeon' in gpu_name.lower():
            brand = 'amd'
        elif 'intel' in gpu_name.lower():
            brand = 'intel'
        
        print(f"   –û–ø—Ä–µ–¥–µ–ª–µ–Ω –±—Ä–µ–Ω–¥: {brand}")
        
        for gpu in gpu_database:
            db_name = normalize_gpu_name(gpu.get('name', ''))
            db_brand = gpu.get('manufacturer', '').lower()
            if brand and brand not in db_brand:
                continue
            if not db_name:
                continue
            name_parts = normalized_name.split()
            db_parts = db_name.split()
            matches_count = 0
            for part in name_parts:
                if any(part in db_part or db_part in part for db_part in db_parts):
                    matches_count += 1
            if name_parts:
                score = matches_count / len(name_parts) * 60
                if score > 0.3 * 60:
                    print(f"   üî∂ –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {gpu.get('name', '')} (score: {score:.1f})")
                    matches.append((gpu, score, 'partial_name'))
    
    if not matches:
        print(f"\n‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É...")
    
    def get_priority(gpu, score, match_type):
        csv_name = gpu.get('name', '').lower()
        if not csv_name.endswith('m'):
            priority = 1000
        else:
            priority = 0
        if match_type == 'exact_model':
            priority += 100
        elif match_type == 'partial_model':
            priority += 50
        priority += score
        priority -= len(csv_name) * 0.1
        return priority
    
    matches.sort(key=lambda x: get_priority(x[0], x[1], x[2]), reverse=True)
    
    print(f"\nüèÜ –¢–æ–ø-5 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
    for i, (gpu, score, match_type) in enumerate(matches[:5]):
        priority = get_priority(gpu, score, match_type)
        print(f"   {i+1}. {gpu.get('name', '')} (score: {score:.1f}, type: {match_type}, priority: {priority:.1f})")
    
    best_match = matches[0]
    print(f"\n‚úÖ –õ—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {best_match[0].get('name', '')}")
    
    return best_match[0]

def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö GPU
    gpu_database = []
    with open('gpu-database.csv', 'r', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            gpu_database.append(row)
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(gpu_database)} –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É
    test_gpu_name = "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ (TUF 3-GTX1660S-O6G-GAMING)"
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è: {test_gpu_name}")
    print("=" * 80)
    
    result = find_matching_gpu(test_gpu_name, gpu_database)
    
    if result:
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('name', '')}")
        print(f"   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {result.get('manufacturer', '')}")
        print(f"   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {result.get('architecture', '')}")
    else:
        print(f"\n‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

if __name__ == "__main__":
    main() 