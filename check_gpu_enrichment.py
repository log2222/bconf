#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –≤ components.json
"""

import json
import os

def check_gpu_enrichment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –≤ components.json"""
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    json_file = "components.json"
    
    if not os.path.exists(json_file):
        print(f"‚ùå –§–∞–π–ª {json_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –≤ {json_file}...")
    
    try:
        with open(json_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–∏ GPU
    if "GPU" not in data:
        print("‚ùå –°–µ–∫—Ü–∏—è 'GPU' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ JSON —Ñ–∞–π–ª–µ!")
        return
    
    gpus = data["GPU"]
    total_gpus = len(gpus)
    
    print(f"\nüìä –í—Å–µ–≥–æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –≤ JSON: {total_gpus}")
    
    # –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–∏
    enrichment_fields = [
        "manufacturer",
        "architecture", 
        "foundry",
        "chip_package",
        "release_date",
        "generation",
        "bus_interface",
        "memory_type",
        "shading_units",
        "texture_mapping_units",
        "render_output_processors"
    ]
    
    enriched_count = 0
    partially_enriched = 0
    not_enriched = 0
    
    enriched_examples = []
    not_enriched_examples = []
    
    for i, gpu in enumerate(gpus):
        name = gpu.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –æ–±–æ–≥–∞—â–µ–Ω–∏—è
        enrichment_field_count = 0
        for field in enrichment_fields:
            if field in gpu:
                enrichment_field_count += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–æ–≥–∞—â–µ–Ω–∏—è
        if enrichment_field_count >= 8:  # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–ª–µ–π –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
            enriched_count += 1
            if len(enriched_examples) < 3:
                enriched_examples.append({
                    "name": name,
                    "fields_count": enrichment_field_count,
                    "manufacturer": gpu.get("manufacturer", "–ù–µ —É–∫–∞–∑–∞–Ω"),
                    "architecture": gpu.get("architecture", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
                })
        elif enrichment_field_count > 0:
            partially_enriched += 1
        else:
            not_enriched += 1
            if len(not_enriched_examples) < 3:
                not_enriched_examples.append(name)
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è:")
    print(f"  ‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–æ–≥–∞—â–µ–Ω–æ: {enriched_count} ({enriched_count/total_gpus*100:.1f}%)")
    print(f"  ‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω–æ: {partially_enriched} ({partially_enriched/total_gpus*100:.1f}%)")
    print(f"  ‚ùå –ù–µ –æ–±–æ–≥–∞—â–µ–Ω–æ: {not_enriched} ({not_enriched/total_gpus*100:.1f}%)")
    
    # –ü—Ä–∏–º–µ—Ä—ã –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ–∫–∞—Ä—Ç
    if enriched_examples:
        print(f"\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ–∫–∞—Ä—Ç:")
        for i, example in enumerate(enriched_examples, 1):
            print(f"  {i}. {example['name']}")
            print(f"     –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {example['manufacturer']}")
            print(f"     –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {example['architecture']}")
            print(f"     –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ–π: {example['fields_count']}/{len(enrichment_fields)}")
    
    # –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ–∫–∞—Ä—Ç
    if not_enriched_examples:
        print(f"\n‚ùå –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ–∫–∞—Ä—Ç:")
        for i, name in enumerate(not_enriched_examples, 1):
            print(f"  {i}. {name}")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π
    print(f"\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –æ–±–æ–≥–∞—â–µ–Ω–∏—è:")
    field_stats = {}
    for field in enrichment_fields:
        field_count = sum(1 for gpu in gpus if field in gpu)
        field_stats[field] = field_count
        percentage = field_count / total_gpus * 100
        status = "‚úÖ" if percentage > 80 else "‚ö†Ô∏è" if percentage > 50 else "‚ùå"
        print(f"  {status} {field}: {field_count}/{total_gpus} ({percentage:.1f}%)")
    
    # –û–±—â–∏–π –≤—ã–≤–æ–¥
    if enriched_count == total_gpus:
        print(f"\nüéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ {total_gpus} –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–æ–≥–∞—â–µ–Ω—ã!")
    elif enriched_count > total_gpus * 0.8:
        print(f"\nüëç –•–æ—Ä–æ—à–æ! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –æ–±–æ–≥–∞—â–µ–Ω—ã ({enriched_count}/{total_gpus})")
    elif enriched_count > 0:
        print(f"\n‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω–æ: {enriched_count}/{total_gpus} –≤–∏–¥–µ–æ–∫–∞—Ä—Ç")
    else:
        print(f"\n‚ùå –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –Ω–µ –æ–±–æ–≥–∞—â–µ–Ω—ã!")
    
    return enriched_count, total_gpus

if __name__ == "__main__":
    check_gpu_enrichment() 