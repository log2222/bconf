import json
import re

def extract_memory_from_name(name):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–º—è—Ç–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è GPU"""
    if not name:
        return None
    
    name_lower = name.lower()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–º—è—Ç–∏
    patterns = [
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å G –≤ –∫–æ–Ω—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, O2G, A4G, O6G, O8G, A11G)
        r'[ao](\d+)g\b',
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å G –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1GD5, 8GC)
        r'(\d+)g[dch]\d*',
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å –ø—Ä–æ–±–µ–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8G , 4G)
        r'(\d+)g\s*[,]',
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å Mb/MB
        r'(\d+)\s*mb\b',
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å Gb/GB
        r'(\d+)\s*gb\b',
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å G –≤ –∫–æ–Ω—Ü–µ —Å–ª–æ–≤–∞
        r'(\d+)g\b',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, name_lower)
        if match:
            value = int(match.group(1))
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ 100, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ MB, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ GB
            if value > 100:
                return value // 1024
            return value
    
    return None

def test_memory_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    
    try:
        with open('components.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª components.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞: {e}")
        return
    
    gpus = data.get('GPU', [])
    without_name_gb = [g for g in gpus if 'name_gb' not in g]
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è {len(without_name_gb)} GPU:")
    print("=" * 80)
    
    success_count = 0
    for i, gpu in enumerate(without_name_gb):
        name = gpu.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        extracted = extract_memory_from_name(name)
        
        print(f"\n{i+1}. {name}")
        print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {extracted}GB" if extracted else "   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å")
        
        if extracted:
            success_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {success_count}/{len(without_name_gb)} ({success_count/len(without_name_gb)*100:.1f}%)")

if __name__ == "__main__":
    test_memory_extraction() 