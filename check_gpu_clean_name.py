import json

def check_gpu_clean_name():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è clean_name –∫ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞–º"""
    
    print("=== –ü–†–û–í–ï–†–ö–ê –ü–û–õ–Ø CLEAN_NAME –£ –í–ò–î–ï–û–ö–ê–†–¢ ===\n")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Ñ–∞–π–ª
        with open('components.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–∏ GPU
        if 'GPU' not in data:
            print("‚ùå –í JSON —Ñ–∞–π–ª–µ –Ω–µ—Ç —Å–µ–∫—Ü–∏–∏ GPU!")
            return
        
        gpus = data['GPU']
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(gpus)} –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –≤ JSON —Ñ–∞–π–ª–µ\n")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è clean_name
        gpus_with_clean_name = []
        gpus_without_clean_name = []
        
        for i, gpu in enumerate(gpus):
            clean_name = gpu.get('clean_name', None)
            if clean_name:
                gpus_with_clean_name.append((i+1, gpu.get('name', ''), clean_name))
            else:
                gpus_without_clean_name.append((i+1, gpu.get('name', '')))
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í–∏–¥–µ–æ–∫–∞—Ä—Ç —Å –ø–æ–ª–µ–º clean_name: {len(gpus_with_clean_name)}")
        print(f"  –í–∏–¥–µ–æ–∫–∞—Ä—Ç –±–µ–∑ –ø–æ–ª—è clean_name: {len(gpus_without_clean_name)}")
        print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: {(len(gpus_with_clean_name)/len(gpus)*100):.1f}%")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å clean_name
        if gpus_with_clean_name:
            print(f"\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã –≤–∏–¥–µ–æ–∫–∞—Ä—Ç —Å –ø–æ–ª–µ–º clean_name:")
            for i, (num, name, clean_name) in enumerate(gpus_with_clean_name[:10]):
                print(f"{i+1:2d}. {num:3d}. {name[:80]}...")
                print(f"    clean_name: {clean_name}")
                print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –±–µ–∑ clean_name
        if gpus_without_clean_name:
            print(f"\n‚ùå –ü—Ä–∏–º–µ—Ä—ã –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –ë–ï–ó –ø–æ–ª—è clean_name:")
            for i, (num, name) in enumerate(gpus_without_clean_name[:5]):
                print(f"{i+1}. {num:3d}. {name[:80]}...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è clean_name
        unique_clean_names = set()
        for gpu in gpus:
            clean_name = gpu.get('clean_name', '')
            if clean_name:
                unique_clean_names.add(clean_name)
        
        print(f"\nüìù –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π clean_name: {len(unique_clean_names)}")
        print(f"–ü—Ä–∏–º–µ—Ä—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö clean_name:")
        for i, clean_name in enumerate(sorted(list(unique_clean_names))[:20]):
            print(f"  {i+1:2d}. {clean_name}")
        
        if len(unique_clean_names) > 20:
            print(f"  ... –∏ –µ—â–µ {len(unique_clean_names) - 20} –∑–Ω–∞—á–µ–Ω–∏–π")
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª components.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞: {e}")

if __name__ == "__main__":
    check_gpu_clean_name() 