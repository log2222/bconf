import json
import re

def test_enrichment_quality():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    with open('components.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    print("üîç –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –û–ë–û–ì–ê–©–ï–ù–ò–Ø –ü–†–û–¶–ï–°–°–û–†–û–í")
    print("=" * 60)
    
    errors = []
    warnings = []
    success_count = 0
    
    for cpu in data['CPU']:
        name = cpu.get('name', '')
        article = cpu.get('article', '')
        clean_name = cpu.get('clean_name', '')
        enriched = cpu.get('enriched', False)
        enrichment_data = cpu.get('enrichment_data', {})
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ
        if not enriched:
            continue
            
        success_count += 1
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ clean_name –¥–ª—è AMD Athlon 200GE
        if '200GE' in name or '200GE' in article:
            expected_clean_name = 'AMD Athlon 200GE'
            if clean_name != expected_clean_name:
                errors.append(f"‚ùå 200GE: {name} | clean_name='{clean_name}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '{expected_clean_name}'")
            else:
                print(f"‚úÖ 200GE: {name} | clean_name='{clean_name}'")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤ clean_name
        if 'AMD' in name:
            if 'Athlon' in name and 'Ryzen' in clean_name:
                errors.append(f"‚ùå –°–ï–†–ò–Ø: {name} | clean_name='{clean_name}' - Athlon –ø–æ–ª—É—á–∏–ª Ryzen")
            elif 'Ryzen' in name and 'Athlon' in clean_name:
                errors.append(f"‚ùå –°–ï–†–ò–Ø: {name} | clean_name='{clean_name}' - Ryzen –ø–æ–ª—É—á–∏–ª Athlon")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ Family –≤ enrichment_data
        family = enrichment_data.get('Family', '')
        if family:
            if 'Athlon' in name and 'Ryzen' in family:
                errors.append(f"‚ùå FAMILY: {name} | Family='{family}' - Athlon –ø–æ–ª—É—á–∏–ª Ryzen Family")
            elif 'Ryzen' in name and 'Athlon' in family:
                errors.append(f"‚ùå FAMILY: {name} | Family='{family}' - Ryzen –ø–æ–ª—É—á–∏–ª Athlon Family")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ Model –≤ enrichment_data (–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "on" –¥–ª—è Athlon)
        model = enrichment_data.get('Model', '')
        if 'Athlon' in name and model == 'on':
            warnings.append(f"‚ö†Ô∏è MODEL: {name} | Model='{model}' - Athlon –∏–º–µ–µ—Ç Model='on'")
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ enrichment_data
        product_id_tray = enrichment_data.get('Product ID Tray', '')
        product_id_boxed = enrichment_data.get('Product ID Boxed', '')
        if article and article not in (product_id_tray + product_id_boxed):
            warnings.append(f"‚ö†Ô∏è –ê–†–¢–ò–ö–£–õ: {name} | article='{article}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Product ID")
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
    print(f"‚úÖ –û–±–æ–≥–∞—â–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤: {success_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
    print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(warnings)}")
    
    if errors:
        print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
        for error in errors:
            print(f"  {error}")
    
    if warnings:
        print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        for warning in warnings:
            print(f"  {warning}")
    
    if not errors and not warnings:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    amd_count = len([cpu for cpu in data['CPU'] if 'AMD' in cpu.get('name', '') and cpu.get('enriched', False)])
    intel_count = len([cpu for cpu in data['CPU'] if 'Intel' in cpu.get('name', '') and cpu.get('enriched', False)])
    print(f"  AMD –æ–±–æ–≥–∞—â–µ–Ω–æ: {amd_count}")
    print(f"  Intel –æ–±–æ–≥–∞—â–µ–Ω–æ: {intel_count}")
    
    return len(errors) == 0

if __name__ == "__main__":
    success = test_enrichment_quality()
    exit(0 if success else 1) 